当在一个函数中声明一个较大的局部数组变量时，程序可以编译通过，但运行时，老是进入hardfaulthandler，导致出现改问题的原因可能是栈溢出。因为局部变量是存放在栈区的，而全局变量在全局区(静态区)，如果栈区较小，会产生溢出。
解决这种问题的方法：
方法1：启动文件里面对栈的大小有固定的值。函数里面的数组是在调用该函数的时候，才给你分配空间。将启动文件下的堆栈改大
Stack_Size      EQU     0x00000400  。

Stack Size，一般小工程0X400足够，大工程才设置0X1000就够用，所以默认无需设置太大。


方法2：用静态数组代替普通局部数组。
方法3：数组过大，栈溢出了，有可能覆盖了其他全局变量的值。如果使用很大的数组，可以定义成一个全局变量。如果使用的有os。就使用内存管理。





=================================================================================================

堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。{堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。}
 栈是先进后出的，但是对于堆而言却没有这个特性，两者都是存放临时数据的地方。 对于堆，我们可以随心所欲的进行增加变量和删除变量，不要遵循什么次序，不管大小，只要你喜欢
*栈，用于存放局部变量，局部数组等
*堆，用于保存new 和malloc这些自定义的内存变量;
*全局静态区用于保存全局变量和静态变量;
*字符常量区,用于保存字符串;
*代码区,用于保存程序的二进制代码;





http://blog.csdn.net/qq_30594349/article/details/52843781

更详细参考：http://www.openedv.com/posts/list/24152.htm
